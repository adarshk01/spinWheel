// import { useGLTF, PerspectiveCamera } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import * as THREE from "three";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { PerspectiveCamera, useGLTF, useTexture } from "@react-three/drei";
import { useEffect, useRef, useState } from "react";
import gsap from "gsap";

type GLTFResult = GLTF & {
  nodes: {
    [key: string]: THREE.Mesh;
  };
  materials: {
    [key: string]: THREE.Material;
  };
};

export function SciFi(props: any) {
  const { nodes, materials } = useGLTF(
    "/models/spinWheelBaking.glb"
  ) as GLTFResult;

  const bg = useTexture("/texture/game.png");
  bg.flipY = true;
  // texture.rotation = Math.PI / 50;

  // texture.encoding = THREE.sRGBEncoding;
  const textureMaterial = new THREE.MeshStandardMaterial({
    map: bg,
    //   side: THREE.BackSide,
  });

  const bgRef = useRef<THREE.Mesh | null>(null);
  const btnRef = useRef<THREE.Mesh | null>(null);
  const [spinBtn, setSpinBtn] = useState(false);
  useEffect(() => {
    if (bgRef.current) {
      gsap.to(bgRef.current.rotation, {
        x: "+=360",
        duration: 10000,
        repeat: -1,
        ease: "none",
      });
    }
  }, []);

  useEffect(() => {
    if (!btnRef.current || !spinBtn) return;
    gsap.to(btnRef.current.position, {
      x: -1,
      duration: 0.25,
      ease: "power2.in",
      onComplete: () => {
        if (!btnRef.current) return;
        gsap.to(btnRef.current.position, {
          x: 0.35,
          duration: 0.5,
          ease: "power2.Out",
        });
      },
    });
    setSpinBtn(false);
  }, [spinBtn, btnRef]);

  return (
    <group {...props} dispose={null}>
      <pointLight
        intensity={50}
        decay={2}
        position={[4.076, 5.904, -1.005]}
        rotation={[-1.839, 0.602, 1.932]}
      />
      <PerspectiveCamera
        makeDefault={false}
        far={100}
        near={0.1}
        fov={22.895}
        position={[29.68, -0.844, 0]}
        rotation={[0, 1.494, 0]}
      />
      <mesh
        ref={bgRef}
        castShadow
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={textureMaterial}
        position={[-6.454, 0, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={19.279 * 2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder008.geometry}
        material={materials["Material.003"]}
        position={[0.047, 0.028, -0.027]}
        rotation={[1.559, -0.001, -1.57]}
        scale={[3.825, 0.083, 3.825]}
      />
      <pointLight
        intensity={50}
        decay={2}
        position={[6.329, -0.245, -0.102]}
        rotation={[-Math.PI / 2, 1.571, 0]}
        scale={8}
      />
      <directionalLight
        intensity={5}
        // decay={2}
        color="#dcf1ff"
        position={[10.645, 13.404, -7.417]}
        rotation={[-2.359, 0.898, 0]}
      />
      <pointLight
        intensity={50}
        decay={2}
        position={[1.848, -2.143, 3.74]}
        rotation={[0, 0.546, -Math.PI / 2]}
        scale={8}
      />
      <pointLight
        intensity={50}
        decay={2}
        position={[3.627, -0.789, -5.117]}
        rotation={[-Math.PI, 0.46, Math.PI / 2]}
        scale={8}
      />
      <group position={[-0.323, -3.776, 0]} scale={[0.309, 0.212, 1.388]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001.geometry}
          material={materials["Material.006"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_1.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_2.geometry}
          material={materials["Material.005"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_3.geometry}
          material={materials["Material.007"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube001_4.geometry}
          material={materials["Material.008"]}
        />
      </group>
      <mesh
        ref={btnRef}
        castShadow
        receiveShadow
        geometry={nodes.Sphere.geometry}
        material={materials["Material.004"]}
        position={[0.519, 0.058, -0.027]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={1.192}
        onClick={() => {
          setSpinBtn(true);
        }}
      />
    </group>
  );
}

useGLTF.preload("/models/spinWheelBaking.glb");
